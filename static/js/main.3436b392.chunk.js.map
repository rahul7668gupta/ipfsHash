{"version":3,"sources":["serviceWorker.js","index.js","App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","ipfs","require","host","port","protocol","componentDidMount","a","customNode","nodeUrl","chainId","portis","Portis","web3","Web3","provider","eth","getAccounts","accounts","console","log","net","getId","networkId","ipfsContract","Contract","ipfsHash","abi","networks","address","setState","contractAddress","state","isLoggedIn","error","result","alert","captureFile","event","stopPropagation","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","convertToBuffer","Buffer","from","buffer","onClick","transactionHash","blockNumber","gasUsed","getTransactionReceipt","txReceipt","JSON","stringify","onSubmit","add","err","hash","methods","sendHash","send","txnHash","ipfsUrl","ethAddress","this","className","type","onChange","bsStyle","bordered","responsive","href","rel","Component"],"mappings":"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","file":"static/js/main.3436b392.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from \"react\";\nimport ipfsHash from \"./contracts/ipfsHash.json\";\nimport Portis from '@portis/web3';\nimport Web3 from 'web3';\nimport \"./App.css\";\nimport { Container, Form, Button, Table } from 'react-bootstrap';\n\nconst IPFS = require('ipfs-api');\nconst ipfs = new IPFS({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https'\n});\n\n\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      web3: {},\n      contractAddress: \"\",\n      ipfsHash:null,\n      buffer:'',\n      ethAddress:'',\n      blockNumber:'',\n      transactionHash:'',\n      gasUsed:'',\n      txReceipt: '',\n      ipfsUrl: \"\"\n    }\n  }\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const customNode = {\n        nodeUrl: 'https://rpc-mumbai.matic.today/',\n        chainId: 80001,\n      };\n      \n      const portis = new Portis('0fc96d71-292b-4530-9fe5-404b55a166da', customNode);\n      this.web3 = new Web3(portis.provider);\n\n      // Use web3 to get the user's accounts.\n      this.accounts = await this.web3.eth.getAccounts();\n      console.log(\"Accounts : \" + this.accounts);\n\n      // Get the contract instance.\n      this.networkId = await this.web3.eth.net.getId();\n      console.log(\"Matic network ID: \" + this.networkId);\n      \n      this.ipfsContract = new this.web3.eth.Contract(\n        ipfsHash.abi,\n        ipfsHash.networks[this.networkId] && ipfsHash.networks[this.networkId].address,\n      );\n      console.log(\"Contract Instance : \" + this.ipfsContract);\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({\n        web3: this.web3,\n        contractAddress: ipfsHash.networks[this.networkId].address\n      });\n      console.log(\"Web3 Obj : \" + this.state.web3);\n      portis.isLoggedIn().then(({ error, result }) => {\n        console.log(error, result);\n      });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  captureFile = (event) => {\n    event.stopPropagation()\n    event.preventDefault()\n    const file = event.target.files[0]\n    let reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n    reader.onloadend = () => this.convertToBuffer(reader)\n  };\n\n  convertToBuffer = async (reader) => {\n    const buffer = await Buffer.from(reader.result);\n    this.setState({ buffer });\n  };\n\n  onClick = async () => {\n    console.log(this.state.transactionHash);\n    alert('Getting your Transaction Receipt');\n    try {\n      this.setState({ blockNumber: \"waiting....\", gasUsed: \"waiting...\" });\n\n      await this.web3.eth\n        .getTransactionReceipt(this.state.transactionHash, (error, txReceipt) => {\n        this.setState({txReceipt})\n        console.log(error, txReceipt);\n        })\n\n    } catch (error) {\n      console.log(\"onCLick error: \" + JSON.stringify(error));\n    }\n  }\n\n  onSubmit = async (event) => {\n    alert('Sending your file to get stored on IPFS');\n    event.preventDefault();\n    console.log(\"sending from Account: \" + this.accounts[0]);\n    try {\n      await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n        console.log(err,ipfsHash);\n        //setState by setting ipfsHash to ipfsHash[0].hash \n        this.setState({ ipfsHash: ipfsHash[0].hash });\n        console.log(this.state.ipfsHash)\n        this.ipfsContract.methods\n          .sendHash(this.state.ipfsHash)\n          .send(\n            { from: this.accounts[0] },\n            (error, txnHash) => {\n              console.log(error);\n              console.log(txnHash);\n              this.setState({\n                transactionHash: txnHash,\n                ipfsUrl: `https://gateway.ipfs.io/ipfs/${this.state.ipfsHash}`\n              })\n            })\n      })\n    } catch (error) {\n      console.log(error);\n    }\n\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1> Ethereum and IPFS with Create React App</h1>\n        </header>\n        \n        <hr />\n        <Container>\n          <h3> Choose file to send to IPFS </h3>\n          <Form onSubmit={this.onSubmit}>\n            <input\n              type=\"file\"\n              onChange={this.captureFile}\n            />\n            <Button\n              bsStyle=\"primary\"\n              type=\"submit\">\n              Send it\n           </Button>\n          </Form>\n          <hr />\n          <Button onClick={this.onClick}> Get Transaction Receipt </Button>\n          <Table bordered responsive>\n            <thead>\n              <tr>\n                <th>Tx Receipt Category</th>\n                <th>Values</th>\n              </tr>\n            </thead>\n             \n            <tbody>\n              <tr>\n                <td>IPFS Hash # stored on Eth Contract</td>\n                <td>{this.state.ipfsHash}</td>\n                <td>\n                  <a href={this.state.ipfsUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                    Open file on IPFS\n                  </a>\n                </td>\n              </tr>\n              <tr>\n                <td>Ethereum Contract Address</td>\n                <td>{this.state.contractAddress}</td>\n              </tr>\n              <tr>\n                <td>Tx Hash # </td>\n                <td>{this.state.transactionHash}</td>\n              </tr>\n              <tr>\n                <td>Block Number # </td>\n                <td>{this.state.txReceipt.blockNumber}</td>\n              </tr>\n              <tr>\n                <td>Gas Used</td>\n                <td>{this.state.txReceipt.gasUsed}</td>\n              </tr>\n              \n            </tbody>\n          </Table>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"sourceRoot":""}